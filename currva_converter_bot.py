# flake8: noqa
# pylint: disable=broad-exception-raised, raise-missing-from, too-many-arguments, redefined-outer-name, fixme
# pylance: disable=reportMissingImports, reportMissingModuleSource, reportGeneralTypeIssues
# type: ignore

#TODO –ï—â—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç: –∫–∞–∫ –¥–µ—Ç–µ–∫—Ç–∏—Ç—å –≤–∞–ª—é—Ç—É –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–º–µ–ª –≤ –≤–∏–¥—É –∞–≤—Ç–æ—Ä? –Ø –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ–π—á–∞—Å –ø–æ–¥ –ø–µ—Å–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é —Ñ–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–µ, –∞ –∫—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –≤ –ú–µ–∫—Å–∏–∫–µ –±—ã—Ç—å
#TODO –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
#TODO https://github.com/FlongyDev/py-rpn –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
#TODO –æ, –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—Ö—É–π –ø–æ—Å–ª–∞–ª! –º–æ–∂–Ω–æ —Ç–µ–≥–∞—Ç—å –µ–≥–æ –∏ —Ç–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å—Å—è

import logging
import os
import signal
import sys
import re
import time
import traceback
import telebot
from telebot import types
from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer

from currency_formatter import CurrencyFormatter
from currency_parser import CurrencyParser
from exchange_rates_manager import ExchangeRatesManager
from statistics_manager import StatisticsManager
from user_settings_manager import UserSettingsManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(os.path.splitext(os.path.basename(__file__))[0])

OBSERVER = None

bot_token = os.getenv('BOT_TOKEN')
if not bot_token:
    logger.error("BOT_TOKEN environment variable is not set.")
    sys.exit("Error: BOT_TOKEN environment variable is not set.")
logger.info(f"Bot init, token: {bot_token}")
bot = telebot.TeleBot(bot_token)

api_key = os.getenv('API_KEY')
if not api_key:
    logger.error("API_KEY environment variable is not set.")
    sys.exit("Error: API_KEY environment variable is not set.")
logger.info(f"API key: {api_key}")

admin_user_id = os.getenv('ADMIN_USER_ID')
if not admin_user_id:
    logger.error("ADMIN_USER_ID environment variable is not set.")
    sys.exit("Error: ADMIN_USER_ID environment variable is not set.")
logger.info(f"Admin user ID: {admin_user_id}")


rates_manager = ExchangeRatesManager()
currency_parser = CurrencyParser()
currency_formatter = CurrencyFormatter()
statistics_manager = StatisticsManager()
user_settings_manager = UserSettingsManager()

bot.set_my_commands([
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    types.BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
    types.BotCommand("currencies", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã")
])

START_TIME = time.time()
MAX_TIME_DELTA = 10     #time delta in seconds to skip old messages in group chats


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    message_text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç.\n\n"
        "–ë—ã–≤–∞–µ—Ç, –∑–∞—Ö–æ–¥–∏—à—å –≤ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–∏–¥—è—Ç –ª—é–¥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω, –∏ —Ç–∞–º –ø–∏—à—É—Ç: ¬´–∞ —è –∫—É–ø–∏–ª –∑–∞ 15000 –ª–∞—Ä–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä¬ª.\n"
        "–ß–∏—Ç–∞–µ—à—å —ç—Ç–æ –∏ –¥—É–º–∞–µ—à—å, ¬´—ë–ø—Ç, –∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –≤ –µ–≤—Ä–æ-—Ç–æ?!¬ª\n\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ —Ç–∞–∫–æ–π —á–∞—Ç: –æ–Ω –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´100 —à–µ–∫–µ–ª–µ–π¬ª), "
        "–∏ —Ä–µ–ø–ª–∞–∏—Ç—å: ¬´100 —à–µ–∫–µ–ª–µ–π (üáÆüá±) ‚Äî —ç—Ç–æ üá∫üá∏ $28, üá™üá∫ ‚Ç¨26, üá¨üáß ¬£22, üá∑üá∫ 2932 ‚ÇΩ, üáØüáµ 4124 ¬•, üá¶üá≤ 10 868 ÷è¬ª. \n"
        "(–ï—Å–ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –Ω–µ—Ç, –ø–µ—Ä–µ—à–ª–∏ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤ –ª–∏—á–∫—É)\n\n"
        "–ê –µ—â—ë –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º: –º–æ–∂–Ω–æ —Å–∞–º–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å \"@currvaconverter_bot —è —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–æ–¥–∞–ª –Ω–æ—É—Ç–±—É–∫ –∑–∞ 15000 –π–µ–Ω!\" "
        "–≤ –ª—é–±–æ–º —á–∞—Ç–µ ‚Äî –±–æ—Ç –ø–æ–¥—Å—Ç–∞–≤–∏—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Ç–æ–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
        "–° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /currencies –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–∞–∫–∏–µ –≤–∞–ª—é—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.\n\n"
        "–ê –µ—Å–ª–∏ –±–æ—Ç –∑–∞–µ–±–∞–ª, –º–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –µ–≥–æ –Ω–∞—Ö—É–π ‚Äî –æ–Ω –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø—è—Ç—å –º–∏–Ω—É—Ç.\n\n"
    )
    bot.reply_to(message, message_text)



@bot.message_handler(commands=['currencies'])
def handle_currencies(message):
    """Handle /currencies command"""
    args = [arg.strip(',') for arg in message.text.split()[1:]]  # Get arguments after command and remove commas
    
    is_chat = message.chat.type in ['group', 'supergroup']
    entity_id = message.chat.id if is_chat else message.from_user.id
    
    if not args:
        # Show current settings and help
        current_currencies = user_settings_manager.get_currencies(entity_id, is_chat)
        available_currencies = currency_formatter.target_currencies
        
        if is_chat:
            response =  f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–±–æ—Ä –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —á–∞—Ç–∞ '{message.chat.title}'. –ü—Ä–∏–º–µ—Ä:\n"
        else:
            response = f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–±–æ—Ä –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}. –ü—Ä–∏–º–µ—Ä:\n"
        response += f"/currencies {' '.join(available_currencies)} (—ç—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã)\n"
        
        if current_currencies:
            response += f"\n–¢–µ–∫—É—â–∏–µ {'–≤–∞–ª—é—Ç—ã —á–∞—Ç–∞' if is_chat else '–≤–∞—à–∏ –≤–∞–ª—é—Ç—ã'}: {', '.join(current_currencies)}"
        else:
            response += f"\n–°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {', '.join(currency_formatter.default_currencies)}"
            
        bot.reply_to(message, response)
        return

    # Check if user is admin
    if is_chat:
        user_member = bot.get_chat_member(message.chat.id, message.from_user.id)
        if user_member.status not in ['creator', 'administrator']:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç")
            return

    # Convert to uppercase and filter valid currencies, removing duplicates
    new_currencies = list(dict.fromkeys([curr.upper() for curr in args]))
    valid_currencies = [curr for curr in new_currencies if curr in currency_formatter.target_currencies]
    valid_currencies = list(dict.fromkeys(valid_currencies))  # Remove duplicates
    
    if not valid_currencies:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã")
        return
        
    # Save new settings
    user_settings_manager.set_currencies(entity_id, valid_currencies, is_chat)
    
    invalid_currencies = set(new_currencies) - set(valid_currencies)
    response = ""
    if invalid_currencies:
        response += f"\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–¥—ã –≤–∞–ª—é—Ç: {', '.join(invalid_currencies)}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(currency_formatter.target_currencies)}"
    if is_chat:
        response += f"\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤–∞–ª—é—Ç—ã —á–∞—Ç–∞: {', '.join(valid_currencies)}"
    else:
        response += f"\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {', '.join(valid_currencies)}"

    bot.reply_to(message, response)

@bot.message_handler(commands=['stats'])
def send_statistics(message):
    if message.from_user.id != int(admin_user_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        stat_limit = int(message.text.split()[1]) if len(message.text.split()) > 1 else 10
    except ValueError:
        stat_limit = 10
        
    stats = statistics_manager.get_statistics(stat_limit)

    response = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"–í—Å–µ–≥–æ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        f"–í—Å–µ–≥–æ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_inline_requests']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['unique_chats']}\n\n"
        f"–¢–æ–ø-{stat_limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        + "\n".join(f"{('@' + user['username']) if user.get('username') else user['display_name']}: "
                    f"{user['total_requests']} (–æ–±—ã—á–Ω—ã—Ö: {user['requests']}, –∏–Ω–ª–∞–π–Ω: {user['inline_requests']}) "
                    f"[–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_active_str']}]" 
                    for user in stats['top_users'])
        + f"\n\n–¢–æ–ø-{stat_limit} —á–∞—Ç–æ–≤:\n"
        + "\n".join(f"{chat['title']}: {chat['requests']}" 
                    for chat in stats['top_chats'])
    )
    
    bot.reply_to(message, response)


@bot.inline_handler(lambda query: len(query.query) > 0)
def handle_inline_query(query):
    try:
        found_currencies = currency_parser.find_currencies(query.query)
        if not found_currencies:
            results = [
                types.InlineQueryResultArticle(
                    id='1',
                    title='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–π',
                    description=r'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏—á–µ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É ¬Ø\_(„ÉÑ)_/¬Ø',
                    thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/convert_small.jpeg',
                    input_message_content=types.InputTextMessageContent(
                        message_text=query.query
                    )
                ),
                types.InlineQueryResultArticle(
                    id='2', 
                    title='–î–æ–ø–æ–ª–Ω—è–π',
                    description=fr"{query.query} (–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ¬Ø\_(„ÉÑ)_/¬Ø)",
                    thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/insert_small.jpeg', 
                    input_message_content=types.InputTextMessageContent(
                        message_text=query.query
                    )
                )
            ]
            bot.answer_inline_query(query.id, results)
            return

        # Get user settings for the user who sent the inline query
        user_currencies = user_settings_manager.get_currencies(query.from_user.id, is_chat=False)

        rates = {}
        for amount, curr, _ in found_currencies:
            target_currencies = user_currencies if user_currencies else currency_formatter.target_currencies
            for target in target_currencies:
                if target != curr:
                    rate = rates_manager.get_rate(curr, target)
                    if rate:
                        rates[f"{curr}_{target}"] = rate

        # Original response with just conversions
        converted_text = currency_formatter.format_multiple_conversions(
            found_currencies, 
            rates, 
            mode='chat',
            user_currencies=user_currencies
        )
        if not converted_text:
            return

        # Create modified message with replacements
        modified_text_inline = query.query
        for amount, curr, original in reversed(found_currencies):
            conversion = currency_formatter.format_conversion(
                (amount, curr, original), 
                rates, 
                mode='inline',
                user_currencies=user_currencies
            )
            modified_text_inline = modified_text_inline.replace(original, conversion)

        results = [
            types.InlineQueryResultArticle(
                id='1',
                title='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–π',
                description=converted_text,
                thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/convert_small.jpeg',
                input_message_content=types.InputTextMessageContent(
                    message_text=converted_text
                )
            ),
            types.InlineQueryResultArticle(
                id='2', 
                title='–î–æ–ø–æ–ª–Ω—è–π',
                description=modified_text_inline,
                thumbnail_url='https://raw.githubusercontent.com/vvzvlad/currva_converter_bot/master/assets/insert_small.jpeg',
                input_message_content=types.InputTextMessageContent(
                    message_text=modified_text_inline
                )
            )
        ]
        try:
            bot.answer_inline_query(query.id, results)
        except (telebot.apihelper.ApiTelegramException, telebot.apihelper.ApiHTTPException) as e:
            error_code = getattr(e, 'error_code', None)
            if isinstance(e, telebot.apihelper.ApiHTTPException):
                match = re.search(r'HTTP (\d+)', str(e)) # Extract error code from HTTP error message using regex
                error_code = int(match.group(1)) if match else None
                
            if error_code in [400, 431, 414]:  # Message too long errors
                error_results = [
                    types.InlineQueryResultArticle(
                        id='1',
                        title='–û—à–∏–±–∫–∞',
                        description='–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        input_message_content=types.InputTextMessageContent( message_text='–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' )
                    )
                ]
                bot.answer_inline_query(query.id, error_results)
            else:
                raise
            
        logger.info(f"Processed inline query '{query.query}'")
        statistics_manager.log_request(user=query.from_user, chat_id=None, chat_title=None, is_inline=True)

    except Exception as e:
        logger.error(f"Error processing inline query '{query.query}': {str(e)}")
        traceback.print_exc()


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if message.caption:
        return parse_text(message.caption, message)
    else:
        return None

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.photo:
        return parse_text(message.caption, message)
    else:
        return parse_text(message.text, message)

def parse_text(text, message):
    try:
        is_group_chat = message.chat.type in ['group', 'supergroup']
        is_reply_message = message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id
        is_chat_disabled = user_settings_manager.is_chat_disabled(message.chat.id)

        # skip messages from bots 
        if message.via_bot:
            return
            
        # skip forwarded messages only in group chats
        if message.forward_from and is_group_chat:
            return
            
        if message.date < START_TIME - MAX_TIME_DELTA:
            logger.debug(f"Skipping old message from {message.date}, bot start time: {START_TIME}")
            return

        # Check if chat is disabled
        if is_group_chat and is_chat_disabled and not is_reply_message:
            return
        
        # Check for ignore trigger phrases in group chats
        ignore_phrases = ["–Ω–∞—Ö—É–π", "–∑–∞—Ç–∫–Ω–∏—Å—å", "–æ—Ç–∫–ª—é—á–∏—Å—å"]
        ignore_duration = 5 * 60  # 5 minutes 
        if is_group_chat and is_reply_message:
            if any(phrase in message.text.lower() for phrase in ignore_phrases):
                user_settings_manager.set_chat_disabled(message.chat.id, ignore_duration)
                bot.reply_to(message, "–ù—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–∞–º–∏ —Ç–µ–ø–µ—Ä—å!!")
                return
            
        found_currencies = currency_parser.find_currencies(text)
        
        if not found_currencies:
            if not is_group_chat:
                bot.reply_to(message, "–ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É ¬Ø\\_(„ÉÑ)_/¬Ø")
            return  

        entity_id = message.chat.id if is_group_chat else message.from_user.id
        user_currencies = user_settings_manager.get_currencies(entity_id, is_group_chat)
        
        rates = {}
        for _amount, curr, _ in found_currencies:
            target_currencies = user_currencies if user_currencies else currency_formatter.target_currencies
            for target in target_currencies:
                if target != curr:
                    rate = rates_manager.get_rate(curr, target)
                    if rate:
                        rates[f"{curr}_{target}"] = rate
        
        response = currency_formatter.format_multiple_conversions(
            found_currencies, 
            rates, 
            mode='chat',
            user_currencies=user_currencies
        )
        if response:
            logger.info(f"Processed message '{message.text}' in chat '{message.chat.title}'")
            statistics_manager.log_request(user=message.from_user, chat_id=message.chat.id, chat_title=message.chat.title)
            try:
                bot.reply_to(message, response)
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 431:  # Request Header Fields Too Large
                    bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                else:
                    raise

    except Exception as e:
        logger.error(f"Error processing message '{message.text}': {str(e)}")


class CodeChangeHandler(FileSystemEventHandler):
    def __init__(self):
        self.last_modified = time.time()
        
    def on_modified(self, event):
        # Check if the modified file is either the bot code or a question file
        is_bot_code = event.src_path.endswith('.py')
        
        if is_bot_code:
            current_time = time.time()
            if current_time - self.last_modified > 1:  # Prevent multiple reloads
                self.last_modified = current_time
                logger.info(f"Change detected in {event.src_path}. Restarting bot...")
                try:
                    os.execv(sys.executable, [sys.executable] + sys.argv)
                except Exception as e:
                    logger.error(f"Failed to restart bot: {e}")


def signal_handler(_signum, _frame):
    """Handle Ctrl+C signal"""
    logger.info("Received shutdown signal, stopping...")
    if OBSERVER:
        OBSERVER.stop()
        OBSERVER.join()
    sys.exit(0)


if __name__ == '__main__':
    logger.info(f"Bot name: @{bot.get_me().username}")
    logger.info(f"Starting currency converter bot...\n\n\n")
    
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    event_handler = CodeChangeHandler()
    OBSERVER = Observer()
    OBSERVER.schedule(event_handler, path='.', recursive=False)
    OBSERVER.start()
    
    try:
        logger.info("Starting bot polling...")
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"Bot crashed with unexpected error: {e}", exc_info=True)
    finally:
        OBSERVER.stop()
        OBSERVER.join()
        logger.info("Bot stopped")
